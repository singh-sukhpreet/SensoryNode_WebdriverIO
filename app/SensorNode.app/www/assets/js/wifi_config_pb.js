// source: wifi_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var constants_pb = require('./constants_pb.js');
goog.object.extend(proto, constants_pb);
var wifi_constants_pb = require('./wifi_constants_pb.js');
goog.object.extend(proto, wifi_constants_pb);
goog.exportSymbol('proto.CmdApplyConfig', null, global);
goog.exportSymbol('proto.CmdGetStatus', null, global);
goog.exportSymbol('proto.CmdSetConfig', null, global);
goog.exportSymbol('proto.RespApplyConfig', null, global);
goog.exportSymbol('proto.RespGetStatus', null, global);
goog.exportSymbol('proto.RespGetStatus.StateCase', null, global);
goog.exportSymbol('proto.RespSetConfig', null, global);
goog.exportSymbol('proto.WiFiConfigMsgType', null, global);
goog.exportSymbol('proto.WiFiConfigPayload', null, global);
goog.exportSymbol('proto.WiFiConfigPayload.PayloadCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdGetStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdGetStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdGetStatus.displayName = 'proto.CmdGetStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespGetStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RespGetStatus.oneofGroups_);
};
goog.inherits(proto.RespGetStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespGetStatus.displayName = 'proto.RespGetStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdSetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdSetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdSetConfig.displayName = 'proto.CmdSetConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespSetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespSetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespSetConfig.displayName = 'proto.RespSetConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdApplyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdApplyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdApplyConfig.displayName = 'proto.CmdApplyConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespApplyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespApplyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespApplyConfig.displayName = 'proto.RespApplyConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiConfigPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WiFiConfigPayload.oneofGroups_);
};
goog.inherits(proto.WiFiConfigPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiConfigPayload.displayName = 'proto.WiFiConfigPayload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdGetStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdGetStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdGetStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdGetStatus}
 */
proto.CmdGetStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdGetStatus;
  return proto.CmdGetStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdGetStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdGetStatus}
 */
proto.CmdGetStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdGetStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdGetStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdGetStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RespGetStatus.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.RespGetStatus.StateCase = {
  STATE_NOT_SET: 0,
  FAIL_REASON: 10,
  CONNECTED: 11
};

/**
 * @return {proto.RespGetStatus.StateCase}
 */
proto.RespGetStatus.prototype.getStateCase = function() {
  return /** @type {proto.RespGetStatus.StateCase} */(jspb.Message.computeOneofCase(this, proto.RespGetStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespGetStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.RespGetStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespGetStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    staState: jspb.Message.getFieldWithDefault(msg, 2, 0),
    failReason: jspb.Message.getFieldWithDefault(msg, 10, 0),
    connected: (f = msg.getConnected()) && wifi_constants_pb.WifiConnectedState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespGetStatus}
 */
proto.RespGetStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespGetStatus;
  return proto.RespGetStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespGetStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespGetStatus}
 */
proto.RespGetStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!proto.WifiStationState} */ (reader.readEnum());
      msg.setStaState(value);
      break;
    case 10:
      var value = /** @type {!proto.WifiConnectFailedReason} */ (reader.readEnum());
      msg.setFailReason(value);
      break;
    case 11:
      var value = new wifi_constants_pb.WifiConnectedState;
      reader.readMessage(value,wifi_constants_pb.WifiConnectedState.deserializeBinaryFromReader);
      msg.setConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespGetStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespGetStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespGetStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStaState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.WifiConnectFailedReason} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getConnected();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      wifi_constants_pb.WifiConnectedState.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespGetStatus.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional WifiStationState sta_state = 2;
 * @return {!proto.WifiStationState}
 */
proto.RespGetStatus.prototype.getStaState = function() {
  return /** @type {!proto.WifiStationState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.WifiStationState} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setStaState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional WifiConnectFailedReason fail_reason = 10;
 * @return {!proto.WifiConnectFailedReason}
 */
proto.RespGetStatus.prototype.getFailReason = function() {
  return /** @type {!proto.WifiConnectFailedReason} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.WifiConnectFailedReason} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setFailReason = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.RespGetStatus.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.clearFailReason = function() {
  return jspb.Message.setOneofField(this, 10, proto.RespGetStatus.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RespGetStatus.prototype.hasFailReason = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional WifiConnectedState connected = 11;
 * @return {?proto.WifiConnectedState}
 */
proto.RespGetStatus.prototype.getConnected = function() {
  return /** @type{?proto.WifiConnectedState} */ (
    jspb.Message.getWrapperField(this, wifi_constants_pb.WifiConnectedState, 11));
};


/**
 * @param {?proto.WifiConnectedState|undefined} value
 * @return {!proto.RespGetStatus} returns this
*/
proto.RespGetStatus.prototype.setConnected = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.RespGetStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.clearConnected = function() {
  return this.setConnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RespGetStatus.prototype.hasConnected = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdSetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdSetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdSetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: msg.getSsid_asB64(),
    passphrase: msg.getPassphrase_asB64(),
    bssid: msg.getBssid_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdSetConfig}
 */
proto.CmdSetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdSetConfig;
  return proto.CmdSetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdSetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdSetConfig}
 */
proto.CmdSetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSsid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassphrase(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBssid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdSetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdSetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBssid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes ssid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getSsid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ssid = 1;
 * This is a type-conversion wrapper around `getSsid()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getSsid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSsid()));
};


/**
 * optional bytes ssid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSsid()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getSsid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSsid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setSsid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes passphrase = 2;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes passphrase = 2;
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassphrase()));
};


/**
 * optional bytes passphrase = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassphrase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setPassphrase = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes bssid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getBssid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bssid = 3;
 * This is a type-conversion wrapper around `getBssid()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getBssid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBssid()));
};


/**
 * optional bytes bssid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBssid()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getBssid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBssid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setBssid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 channel = 4;
 * @return {number}
 */
proto.CmdSetConfig.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespSetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.RespSetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespSetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespSetConfig}
 */
proto.RespSetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespSetConfig;
  return proto.RespSetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespSetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespSetConfig}
 */
proto.RespSetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespSetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespSetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespSetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespSetConfig.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespSetConfig} returns this
 */
proto.RespSetConfig.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdApplyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdApplyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdApplyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdApplyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdApplyConfig}
 */
proto.CmdApplyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdApplyConfig;
  return proto.CmdApplyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdApplyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdApplyConfig}
 */
proto.CmdApplyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdApplyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdApplyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdApplyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdApplyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespApplyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.RespApplyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespApplyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespApplyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespApplyConfig}
 */
proto.RespApplyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespApplyConfig;
  return proto.RespApplyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespApplyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespApplyConfig}
 */
proto.RespApplyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespApplyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespApplyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespApplyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespApplyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespApplyConfig.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespApplyConfig} returns this
 */
proto.RespApplyConfig.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WiFiConfigPayload.oneofGroups_ = [[10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.WiFiConfigPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_GET_STATUS: 10,
  RESP_GET_STATUS: 11,
  CMD_SET_CONFIG: 12,
  RESP_SET_CONFIG: 13,
  CMD_APPLY_CONFIG: 14,
  RESP_APPLY_CONFIG: 15
};

/**
 * @return {proto.WiFiConfigPayload.PayloadCase}
 */
proto.WiFiConfigPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.WiFiConfigPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.WiFiConfigPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiConfigPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiConfigPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiConfigPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiConfigPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdGetStatus: (f = msg.getCmdGetStatus()) && proto.CmdGetStatus.toObject(includeInstance, f),
    respGetStatus: (f = msg.getRespGetStatus()) && proto.RespGetStatus.toObject(includeInstance, f),
    cmdSetConfig: (f = msg.getCmdSetConfig()) && proto.CmdSetConfig.toObject(includeInstance, f),
    respSetConfig: (f = msg.getRespSetConfig()) && proto.RespSetConfig.toObject(includeInstance, f),
    cmdApplyConfig: (f = msg.getCmdApplyConfig()) && proto.CmdApplyConfig.toObject(includeInstance, f),
    respApplyConfig: (f = msg.getRespApplyConfig()) && proto.RespApplyConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiConfigPayload}
 */
proto.WiFiConfigPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiConfigPayload;
  return proto.WiFiConfigPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiConfigPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiConfigPayload}
 */
proto.WiFiConfigPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WiFiConfigMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 10:
      var value = new proto.CmdGetStatus;
      reader.readMessage(value,proto.CmdGetStatus.deserializeBinaryFromReader);
      msg.setCmdGetStatus(value);
      break;
    case 11:
      var value = new proto.RespGetStatus;
      reader.readMessage(value,proto.RespGetStatus.deserializeBinaryFromReader);
      msg.setRespGetStatus(value);
      break;
    case 12:
      var value = new proto.CmdSetConfig;
      reader.readMessage(value,proto.CmdSetConfig.deserializeBinaryFromReader);
      msg.setCmdSetConfig(value);
      break;
    case 13:
      var value = new proto.RespSetConfig;
      reader.readMessage(value,proto.RespSetConfig.deserializeBinaryFromReader);
      msg.setRespSetConfig(value);
      break;
    case 14:
      var value = new proto.CmdApplyConfig;
      reader.readMessage(value,proto.CmdApplyConfig.deserializeBinaryFromReader);
      msg.setCmdApplyConfig(value);
      break;
    case 15:
      var value = new proto.RespApplyConfig;
      reader.readMessage(value,proto.RespApplyConfig.deserializeBinaryFromReader);
      msg.setRespApplyConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiConfigPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiConfigPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiConfigPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiConfigPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmdGetStatus();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.CmdGetStatus.serializeBinaryToWriter
    );
  }
  f = message.getRespGetStatus();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.RespGetStatus.serializeBinaryToWriter
    );
  }
  f = message.getCmdSetConfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CmdSetConfig.serializeBinaryToWriter
    );
  }
  f = message.getRespSetConfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.RespSetConfig.serializeBinaryToWriter
    );
  }
  f = message.getCmdApplyConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.CmdApplyConfig.serializeBinaryToWriter
    );
  }
  f = message.getRespApplyConfig();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.RespApplyConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional WiFiConfigMsgType msg = 1;
 * @return {!proto.WiFiConfigMsgType}
 */
proto.WiFiConfigPayload.prototype.getMsg = function() {
  return /** @type {!proto.WiFiConfigMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WiFiConfigMsgType} value
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CmdGetStatus cmd_get_status = 10;
 * @return {?proto.CmdGetStatus}
 */
proto.WiFiConfigPayload.prototype.getCmdGetStatus = function() {
  return /** @type{?proto.CmdGetStatus} */ (
    jspb.Message.getWrapperField(this, proto.CmdGetStatus, 10));
};


/**
 * @param {?proto.CmdGetStatus|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdGetStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdGetStatus = function() {
  return this.setCmdGetStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdGetStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RespGetStatus resp_get_status = 11;
 * @return {?proto.RespGetStatus}
 */
proto.WiFiConfigPayload.prototype.getRespGetStatus = function() {
  return /** @type{?proto.RespGetStatus} */ (
    jspb.Message.getWrapperField(this, proto.RespGetStatus, 11));
};


/**
 * @param {?proto.RespGetStatus|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespGetStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespGetStatus = function() {
  return this.setRespGetStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespGetStatus = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CmdSetConfig cmd_set_config = 12;
 * @return {?proto.CmdSetConfig}
 */
proto.WiFiConfigPayload.prototype.getCmdSetConfig = function() {
  return /** @type{?proto.CmdSetConfig} */ (
    jspb.Message.getWrapperField(this, proto.CmdSetConfig, 12));
};


/**
 * @param {?proto.CmdSetConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdSetConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdSetConfig = function() {
  return this.setCmdSetConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdSetConfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RespSetConfig resp_set_config = 13;
 * @return {?proto.RespSetConfig}
 */
proto.WiFiConfigPayload.prototype.getRespSetConfig = function() {
  return /** @type{?proto.RespSetConfig} */ (
    jspb.Message.getWrapperField(this, proto.RespSetConfig, 13));
};


/**
 * @param {?proto.RespSetConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespSetConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespSetConfig = function() {
  return this.setRespSetConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespSetConfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CmdApplyConfig cmd_apply_config = 14;
 * @return {?proto.CmdApplyConfig}
 */
proto.WiFiConfigPayload.prototype.getCmdApplyConfig = function() {
  return /** @type{?proto.CmdApplyConfig} */ (
    jspb.Message.getWrapperField(this, proto.CmdApplyConfig, 14));
};


/**
 * @param {?proto.CmdApplyConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdApplyConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdApplyConfig = function() {
  return this.setCmdApplyConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdApplyConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RespApplyConfig resp_apply_config = 15;
 * @return {?proto.RespApplyConfig}
 */
proto.WiFiConfigPayload.prototype.getRespApplyConfig = function() {
  return /** @type{?proto.RespApplyConfig} */ (
    jspb.Message.getWrapperField(this, proto.RespApplyConfig, 15));
};


/**
 * @param {?proto.RespApplyConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespApplyConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespApplyConfig = function() {
  return this.setRespApplyConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespApplyConfig = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * @enum {number}
 */
proto.WiFiConfigMsgType = {
  TYPECMDGETSTATUS: 0,
  TYPERESPGETSTATUS: 1,
  TYPECMDSETCONFIG: 2,
  TYPERESPSETCONFIG: 3,
  TYPECMDAPPLYCONFIG: 4,
  TYPERESPAPPLYCONFIG: 5
};

goog.object.extend(exports, proto);
